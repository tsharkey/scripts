#!/usr/bin/env python3

# ---------------------------------------------------------
# gflow
#
# a script that goes through a flow of adding a commit and ensures
# that commit messages have the correct format
#
# Requirements:
#  - git
#  - github personal access token set as an environment variable GH_ACCESS_TOKEN
#
# Flow:
# - add changes
# - get commit message
# - ask what type of change it is [fix, feat, mod, chore, docs, etc]
# - get ticket number if it is part of the branch name
#   - branch names should be in the format <ticket number>.<branch name>
# - build message (ticket number + change type + message)
# - commit
# - push to remote
# ---------------------------------------------------------

import sys

from git import Repo
from simple_term_menu import TerminalMenu
from termcolor import colored

from pyutils.githelpers import *

change_types = [
    "fix: Bug fix for the user, not a fix to a build script",
    "feat: New feature for the user, not a new feature for build script",
    "chore: Updating grunt tasks etc; no production code change",
    "docs: Documentation only changes",
    "WIP: Work in progress",
    "refactor: refactoring production code, eg. renaming a variable",
    "test: adding missing tests, refactoring tests; no production code change",
    "build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)",
    "ci: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)",
    "perf: A code change that improves performance",
    "style: formatting, missing semi colons, etc; no production code change",
    "cancel: Cancel"
]


def get_change_type(options=change_types):
    """get_change_type
    Gets the change type from the user.
    """

    terminal_menu = TerminalMenu(
        options, show_search_hint=True, search_key=None,
        title="Select change type: ")
    change_type_index = terminal_menu.show()
    change_type = options[change_type_index]
    short_type = change_type.split(":")[0]
    return short_type + ": "


def build_commit_message(local=Repo(".")):
    """build_commit_message
    Builds the commit message based on the change type and the ticket number.
    """

    builder = ""
    builder += get_branch_ticket_number(local.active_branch.name)
    builder += get_change_type()
    builder += input("Enter commit message: ")

    return builder

####### BEGIN SCRIPT #######


local_repo = Repo(".")

if is_on_default(local_repo):
    answer = input(colored(
        "WARN: You are on the default branch..." +
        " are you sure you want to continue? (y/n) ", "yellow"))
    if answer != "y":
        print("Okay...")
        sys.exit(0)

if has_changes(local_repo):
    commit_message = build_commit_message()
    print("Committing changes... with message: " + commit_message)

    local_repo.git.add(A=True)
    local_repo.git.commit(m=commit_message)
    # push to remote

local_repo.git.push("origin", local_repo.active_branch.name)
