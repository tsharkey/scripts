#!/bin/bash

# Renders a text based list of options that can be selected by the
# user using up, down and enter keys and returns the chosen option.
#
#   Arguments   : list of options, maximum of 256
#                 "opt1" "opt2" ...
#   Return value: selected index (0 for opt1, 1 for opt2 ...)
#
# taken from: https://unix.stackexchange.com/questions/146570/arrow-key-enter-menu
function select_option {

    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "   $1 "; }
    print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=$(get_cursor_row)
    local startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case $(key_input) in
            enter) break;;
            up)    ((selected--));
                   if [ "$selected" -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ "$selected" -ge $# ]; then selected=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    return $selected
}

# push upstream to current branch name, if on master ask if that's ok

# if there are no changes, exit
if [[ $(git status --porcelain) == "" ]]; then
    echo "No changes to push"
    exit 0
fi

# if on master or main branch
branch=$(git rev-parse --abbrev-ref HEAD)
if [ "$branch" = "master" ] || [ "$branch" = "main" ]; then
    echo -n "Are you sure you want to push to master|main? (y/n) "
    read -r answer
    if ! [[ $answer =~ ^([yY][eE][sS]|[yY])$ ]]; then
        exit 0
    fi
fi

git add -A

commitTypeOpts=("fix" "feat" "docs" "style" "refactor" "test" "chore" "revert" "WIP" "cancel")

select_option "${commitTypeOpts[@]}"
chosenStr=${commitTypeOpts[$?]}
if [ "$chosenStr" = "cancel" ]; then
    exit 0
fi

echo -n "Enter a commit message: "
read -r commit_message

ticketNum=$(getbranchticketnumber)

fullMessage="$chosenStr: $ticketNum$commit_message"  

echo "Making commit as:"
echo "$fullMessage"
echo "Are you sure? (y/N) "
read -r  confirm
if [[ $answer =~ ^([yY][eE][sS]|[yY])$ ]]; then
    git commit -m "$fullMessage"

    # check if branch has upstream
    if ! git rev-parse --verify --quiet @{upstream} > /dev/null; then
        echo "Creating upstream branch"
        git push -u origin "${branch}"
        exit 0
    fi

    git push origin "$(git rev-parse --abbrev-ref HEAD)"
fi


